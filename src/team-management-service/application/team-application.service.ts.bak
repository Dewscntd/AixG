import { Injectable, Logger } from '@nestjs/common';\nimport { CommandBus, QueryBus } from '@nestjs/cqrs';\nimport { CreateTeamCommand } from './commands/create-team.command';\nimport { UpdateTeamCommand } from './commands/update-team.command';\nimport { DeleteTeamCommand } from './commands/delete-team.command';\nimport { AddPlayerToTeamCommand } from './commands/add-player-to-team.command';\nimport { RemovePlayerFromTeamCommand } from './commands/remove-player-from-team.command';\nimport { GetTeamQuery } from './queries/get-team.query';\nimport { GetTeamsQuery } from './queries/get-teams.query';\nimport { GetTeamPlayersQuery } from './queries/get-team-players.query';\nimport { GetTeamMatchesQuery } from './queries/get-team-matches.query';\n\nexport interface CreateTeamDto {\n  name: string;\n  shortName?: string;\n  logo?: string;\n  colors?: {\n    primary: string;\n    secondary?: string;\n  };\n  stadium?: string;\n  foundedYear?: number;\n  website?: string;\n  socialMedia?: {\n    facebook?: string;\n    twitter?: string;\n    instagram?: string;\n  };\n}\n\nexport interface UpdateTeamDto {\n  name?: string;\n  shortName?: string;\n  logo?: string;\n  colors?: {\n    primary: string;\n    secondary?: string;\n  };\n  stadium?: string;\n  foundedYear?: number;\n  website?: string;\n  socialMedia?: {\n    facebook?: string;\n    twitter?: string;\n    instagram?: string;\n  };\n  coachId?: string;\n  formation?: string;\n}\n\nexport interface TeamFiltersDto {\n  name?: string;\n  league?: string;\n  founded?: { from?: number; to?: number };\n  limit?: number;\n  offset?: number;\n}\n\nexport interface AddPlayerDto {\n  name: string;\n  position?: string;\n  jerseyNumber?: number;\n  dateOfBirth?: Date;\n  nationality?: string;\n}\n\n@Injectable()\nexport class TeamApplicationService {\n  private readonly logger = new Logger(TeamApplicationService.name);\n\n  constructor(\n    private readonly commandBus: CommandBus,\n    private readonly queryBus: QueryBus,\n  ) {}\n\n  async createTeam(dto: CreateTeamDto): Promise<{ teamId: string }> {\n    this.logger.log(`Creating team: ${dto.name}`);\n\n    const command = new CreateTeamCommand(\n      dto.name,\n      dto.shortName,\n      dto.logo,\n      dto.colors,\n      dto.stadium,\n      dto.foundedYear,\n      dto.website,\n      dto.socialMedia,\n    );\n\n    return await this.commandBus.execute(command);\n  }\n\n  async updateTeam(teamId: string, dto: UpdateTeamDto): Promise<void> {\n    this.logger.log(`Updating team: ${teamId}`);\n\n    const command = new UpdateTeamCommand(teamId, dto);\n    await this.commandBus.execute(command);\n  }\n\n  async deleteTeam(teamId: string): Promise<void> {\n    this.logger.log(`Deleting team: ${teamId}`);\n\n    const command = new DeleteTeamCommand(teamId);\n    await this.commandBus.execute(command);\n  }\n\n  async getTeam(teamId: string): Promise<any> {\n    this.logger.log(`Getting team: ${teamId}`);\n\n    const query = new GetTeamQuery(teamId);\n    return await this.queryBus.execute(query);\n  }\n\n  async getTeams(filters?: TeamFiltersDto): Promise<any[]> {\n    this.logger.log('Getting teams with filters:', filters);\n\n    const query = new GetTeamsQuery(filters);\n    return await this.queryBus.execute(query);\n  }\n\n  async addPlayerToTeam(teamId: string, playerDto: AddPlayerDto): Promise<{ playerId: string }> {\n    this.logger.log(`Adding player to team: ${teamId}`);\n\n    const command = new AddPlayerToTeamCommand(\n      teamId,\n      playerDto.name,\n      playerDto.position,\n      playerDto.jerseyNumber,\n      playerDto.dateOfBirth,\n      playerDto.nationality,\n    );\n\n    return await this.commandBus.execute(command);\n  }\n\n  async removePlayerFromTeam(teamId: string, playerId: string): Promise<void> {\n    this.logger.log(`Removing player ${playerId} from team: ${teamId}`);\n\n    const command = new RemovePlayerFromTeamCommand(teamId, playerId);\n    await this.commandBus.execute(command);\n  }\n\n  async getTeamPlayers(teamId: string): Promise<any[]> {\n    this.logger.log(`Getting players for team: ${teamId}`);\n\n    const query = new GetTeamPlayersQuery(teamId);\n    return await this.queryBus.execute(query);\n  }\n\n  async getTeamMatches(teamId: string, timeRange?: { from: Date; to: Date }): Promise<any[]> {\n    this.logger.log(`Getting matches for team: ${teamId}`);\n\n    const query = new GetTeamMatchesQuery(teamId, timeRange);\n    return await this.queryBus.execute(query);\n  }\n}