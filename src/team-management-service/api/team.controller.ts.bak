import {\n  Controller,\n  Get,\n  Post,\n  Put,\n  Delete,\n  Body,\n  Param,\n  Query,\n  HttpStatus,\n  HttpCode,\n  UseGuards,\n  Logger,\n} from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiResponse, ApiBearerAuth } from '@nestjs/swagger';\nimport { JwtAuthGuard } from '../../common/guards/jwt-auth.guard';\nimport { TeamApplicationService, CreateTeamDto, UpdateTeamDto, TeamFiltersDto, AddPlayerDto } from '../application/team-application.service';\n\n@ApiTags('teams')\n@Controller('teams')\n@UseGuards(JwtAuthGuard)\n@ApiBearerAuth()\nexport class TeamController {\n  private readonly logger = new Logger(TeamController.name);\n\n  constructor(private readonly teamApplicationService: TeamApplicationService) {}\n\n  @Post()\n  @HttpCode(HttpStatus.CREATED)\n  @ApiOperation({ summary: 'Create a new team' })\n  @ApiResponse({ status: 201, description: 'Team created successfully' })\n  @ApiResponse({ status: 400, description: 'Invalid input data' })\n  @ApiResponse({ status: 409, description: 'Team name already exists' })\n  async createTeam(@Body() createTeamDto: CreateTeamDto) {\n    this.logger.log(`Creating team: ${createTeamDto.name}`);\n    return await this.teamApplicationService.createTeam(createTeamDto);\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: 'Get team by ID' })\n  @ApiResponse({ status: 200, description: 'Team found' })\n  @ApiResponse({ status: 404, description: 'Team not found' })\n  async getTeam(@Param('id') id: string) {\n    this.logger.log(`Getting team: ${id}`);\n    return await this.teamApplicationService.getTeam(id);\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Get all teams with optional filters' })\n  @ApiResponse({ status: 200, description: 'Teams retrieved successfully' })\n  async getTeams(\n    @Query('name') name?: string,\n    @Query('league') league?: string,\n    @Query('foundedFrom') foundedFrom?: number,\n    @Query('foundedTo') foundedTo?: number,\n    @Query('limit') limit?: number,\n    @Query('offset') offset?: number,\n  ) {\n    this.logger.log('Getting teams with filters');\n    \n    const filters: TeamFiltersDto = {\n      name,\n      league,\n      founded: (foundedFrom || foundedTo) ? {\n        from: foundedFrom,\n        to: foundedTo,\n      } : undefined,\n      limit: limit ? Number(limit) : undefined,\n      offset: offset ? Number(offset) : undefined,\n    };\n\n    return await this.teamApplicationService.getTeams(filters);\n  }\n\n  @Put(':id')\n  @ApiOperation({ summary: 'Update team by ID' })\n  @ApiResponse({ status: 200, description: 'Team updated successfully' })\n  @ApiResponse({ status: 404, description: 'Team not found' })\n  @ApiResponse({ status: 400, description: 'Invalid input data' })\n  async updateTeam(\n    @Param('id') id: string,\n    @Body() updateTeamDto: UpdateTeamDto,\n  ) {\n    this.logger.log(`Updating team: ${id}`);\n    await this.teamApplicationService.updateTeam(id, updateTeamDto);\n    return { message: 'Team updated successfully' };\n  }\n\n  @Delete(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  @ApiOperation({ summary: 'Delete team by ID' })\n  @ApiResponse({ status: 204, description: 'Team deleted successfully' })\n  @ApiResponse({ status: 404, description: 'Team not found' })\n  async deleteTeam(@Param('id') id: string) {\n    this.logger.log(`Deleting team: ${id}`);\n    await this.teamApplicationService.deleteTeam(id);\n  }\n\n  @Get(':id/players')\n  @ApiOperation({ summary: 'Get all players for a team' })\n  @ApiResponse({ status: 200, description: 'Team players retrieved successfully' })\n  @ApiResponse({ status: 404, description: 'Team not found' })\n  async getTeamPlayers(@Param('id') id: string) {\n    this.logger.log(`Getting players for team: ${id}`);\n    return await this.teamApplicationService.getTeamPlayers(id);\n  }\n\n  @Post(':id/players')\n  @HttpCode(HttpStatus.CREATED)\n  @ApiOperation({ summary: 'Add a player to the team' })\n  @ApiResponse({ status: 201, description: 'Player added successfully' })\n  @ApiResponse({ status: 404, description: 'Team not found' })\n  @ApiResponse({ status: 400, description: 'Invalid player data or team full' })\n  async addPlayerToTeam(\n    @Param('id') id: string,\n    @Body() addPlayerDto: AddPlayerDto,\n  ) {\n    this.logger.log(`Adding player to team: ${id}`);\n    return await this.teamApplicationService.addPlayerToTeam(id, addPlayerDto);\n  }\n\n  @Delete(':id/players/:playerId')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  @ApiOperation({ summary: 'Remove a player from the team' })\n  @ApiResponse({ status: 204, description: 'Player removed successfully' })\n  @ApiResponse({ status: 404, description: 'Team or player not found' })\n  async removePlayerFromTeam(\n    @Param('id') id: string,\n    @Param('playerId') playerId: string,\n  ) {\n    this.logger.log(`Removing player ${playerId} from team: ${id}`);\n    await this.teamApplicationService.removePlayerFromTeam(id, playerId);\n  }\n\n  @Get(':id/matches')\n  @ApiOperation({ summary: 'Get all matches for a team' })\n  @ApiResponse({ status: 200, description: 'Team matches retrieved successfully' })\n  @ApiResponse({ status: 404, description: 'Team not found' })\n  async getTeamMatches(\n    @Param('id') id: string,\n    @Query('from') from?: string,\n    @Query('to') to?: string,\n  ) {\n    this.logger.log(`Getting matches for team: ${id}`);\n    \n    const timeRange = (from || to) ? {\n      from: from ? new Date(from) : undefined,\n      to: to ? new Date(to) : undefined,\n    } : undefined;\n\n    return await this.teamApplicationService.getTeamMatches(id, timeRange as any);\n  }\n}