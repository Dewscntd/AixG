name: FootAnalytics CI/CD Testing Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly tests at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '20.x'
  PYTHON_VERSION: '3.11'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Security
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Install frontend dependencies
        run: cd frontend && npm ci --legacy-peer-deps

      - name: Run ESLint
        run: npm run lint

      - name: Run Prettier check
        run: npm run format:check

      - name: Run TypeScript check
        run: npm run type-check

      - name: Security audit
        run: npm audit --audit-level=high

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript,typescript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run unit tests
        run: npm run test:unit -- --coverage --maxWorkers=2

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unit-tests
          name: unit-tests-${{ matrix.node-version }}

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: footanalytics_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run database migrations
        run: npm run db:migrate:test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/footanalytics_test

      - name: Run integration tests
        run: npm run test:integration
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/footanalytics_test
          REDIS_URL: redis://localhost:6379

  # Contract Tests
  contract-tests:
    name: Contract Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run contract tests
        run: npm run test:contract

      - name: Publish Pact contracts
        if: github.ref == 'refs/heads/main'
        run: npm run pact:publish || echo "Pact publishing skipped - broker not configured"
        env:
          PACT_BROKER_BASE_URL: ${{ secrets.PACT_BROKER_URL }}
          PACT_BROKER_TOKEN: ${{ secrets.PACT_BROKER_TOKEN }}

  # End-to-End Tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Start test environment
        run: |
          docker-compose -f docker-compose.test.yml up -d
          npm run wait-for-services

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - name: Stop test environment
        if: always()
        run: docker-compose -f docker-compose.test.yml down

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf-test]')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Install K6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Start test environment
        run: |
          docker-compose -f docker-compose.perf.yml up -d
          npm run wait-for-services

      - name: Run load tests
        run: npm run test:load

      - name: Run stress tests
        run: npm run test:stress

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: test-results/performance/

      - name: Stop test environment
        if: always()
        run: docker-compose -f docker-compose.perf.yml down

  # Chaos Engineering Tests
  chaos-tests:
    name: Chaos Engineering Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[chaos-test]')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Setup kind cluster
        uses: helm/kind-action@v1.8.0
        with:
          cluster_name: chaos-test-cluster

      - name: Install Litmus
        run: |
          kubectl apply -f https://litmuschaos.github.io/litmus/3.0.0/litmus-3.0.0.yaml
          kubectl wait --for=condition=Ready pods --all -n litmus --timeout=300s

      - name: Deploy test application
        run: |
          kubectl apply -f k8s/test/
          kubectl wait --for=condition=Ready pods --all -n footanalytics-test --timeout=300s

      - name: Run chaos experiments
        run: |
          kubectl apply -f test/chaos/
          npm run test:chaos:wait

      - name: Collect chaos test results
        if: always()
        run: |
          kubectl logs -n litmus -l app=chaos-runner > chaos-results.log
          kubectl get chaosresults -n footanalytics-test -o yaml > chaos-results.yaml

      - name: Upload chaos test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: chaos-test-results
          path: |
            chaos-results.log
            chaos-results.yaml

  # Build and Security Scan
  build-and-scan:
    name: Build & Security Scan
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Install frontend dependencies
        run: cd frontend && npm ci --legacy-peer-deps

      - name: Build application
        run: npm run build

      - name: Build Docker image
        run: docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Build and Push Images
  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests, contract-tests, e2e-tests, build-and-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ steps.meta.outputs.tags }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom.spdx.json

  # Deploy to Staging with GitOps
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push]
    environment: staging
    steps:
      - name: Checkout GitOps repository
        uses: actions/checkout@v4
        with:
          repository: footanalytics/gitops-config
          token: ${{ secrets.GITOPS_TOKEN }}
          path: gitops

      - name: Update staging manifests
        run: |
          cd gitops
          # Update image tags in staging overlay
          sed -i "s|image: .*|image: ${{ needs.build-and-push.outputs.image-tag }}|g" \
            overlays/staging/kustomization.yaml

          # Update image digest for security
          echo "  - name: ${{ env.IMAGE_NAME }}" >> overlays/staging/kustomization.yaml
          echo "    digest: ${{ needs.build-and-push.outputs.image-digest }}" >> overlays/staging/kustomization.yaml

      - name: Commit and push changes
        run: |
          cd gitops
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "Deploy ${{ github.sha }} to staging" || exit 0
          git push

      - name: Wait for ArgoCD sync
        run: |
          # Wait for ArgoCD to sync the changes
          sleep 60

          # Check deployment status
          kubectl get applications -n argocd footanalytics-staging -o jsonpath='{.status.sync.status}'

      - name: Run smoke tests
        run: npm run test:smoke:staging

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

  # Canary Deployment to Production
  deploy-production-canary:
    name: Deploy Production Canary
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    environment: production
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout GitOps repository
        uses: actions/checkout@v4
        with:
          repository: footanalytics/gitops-config
          token: ${{ secrets.GITOPS_TOKEN }}
          path: gitops

      - name: Update production canary manifests
        run: |
          cd gitops
          # Update canary deployment
          sed -i "s|image: .*|image: ${{ needs.build-and-push.outputs.image-tag }}|g" \
            overlays/production/canary/kustomization.yaml

      - name: Commit and push canary changes
        run: |
          cd gitops
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "Start canary deployment ${{ github.sha }} to production" || exit 0
          git push

      - name: Monitor canary deployment
        run: |
          # Monitor Flagger canary analysis
          timeout 1800 bash -c '
            while true; do
              status=$(kubectl get canary api-gateway -n footanalytics -o jsonpath="{.status.phase}")
              echo "Canary status: $status"

              if [ "$status" = "Succeeded" ]; then
                echo "Canary deployment successful"
                exit 0
              elif [ "$status" = "Failed" ]; then
                echo "Canary deployment failed"
                exit 1
              fi

              sleep 30
            done
          '

      - name: Promote to production
        if: success()
        run: |
          cd gitops
          # Update production stable deployment
          sed -i "s|image: .*|image: ${{ needs.build-and-push.outputs.image-tag }}|g" \
            overlays/production/stable/kustomization.yaml

          git add .
          git commit -m "Promote ${{ github.sha }} to production stable" || exit 0
          git push

      - name: Notify production deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#production-deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()
